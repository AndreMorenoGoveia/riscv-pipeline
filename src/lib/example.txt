// Test Program for RISC-V
// If successful, it should write the value 0xABCDE02E to address 132 (0x84)

// main
00500113 // addi x2, x0, 5     # x2 = 5
00C00193 // addi x3, x0, 12    # x3 = 12 
FF718393 // addi x7, x3, -9    # x7 = (12 - 9) = 3
0023E233 // or x4, x7, x2      # x4 = (3 OR 5) = 7 
0041C2B3 // xor x5, x3, x4     # x5 = (12 XOR 7) = 1
004282B3 // add x5, x5, x4     # x5 = (11 + 7) = 18
02728863 // beq x5, x7, end    # shouldn't be taken 
0041A233 // slt x4, x3, x4     # x4 = (12 < 7) = 0
00020463 // beq x4, x0, around # should be taken
00000293 // addi x5, x0, 0     # shouldn't happen 

// around
0023A233 // slt x4, x7, x2     # x4 = (3 < 5) = 1
005203B3 // add x7, x4, x5     # x7 = (1 + 18) = 19
402383B3 // sub x7, x7, x2     # x7 = (19 - 5) = 14
0471AA23 // sw x7, 84(x3)      # [96] = 14
06002103 // lw x2, 96(x0)      # x2 = [96] = 14
005104B3 // add x9, x2, x5     # x9 = (14 + 18) = 32
008001EF // jal x3, end        # jump to end, x3 = 0x44
00100113 // addi x2, x0, 1     # shouldn't happen

// end
00910133 // add x2, x2, x9     # x2 = (14 + 32) = 46
00100213 // addi x4, x0, 1     # x4 = 1
800002b7 // lui x5, 0x80000    # x5 = 0x80000000
0042a333 // slt x6, x5, x4     # x6 = 1

// wrong
00030063 // beq x6, x0, wrong # shouldnâ€™t be taken
ABCDE4B7 // lui x9, 0xABCDE   # x3 = 0xABCDE000
00910133 // add x2, x2, x9    # x2 = 0xABCDE02E
0421a023 // sw x2, 0x40(x3)   # mem[132] = 0xABCDE02E

// done
00210063 // beq x2, x2, done  # infinite loop 


